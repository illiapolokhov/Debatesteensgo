const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const path = require('path');
require('dotenv').config(); // –î–ª—è —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞

const app = express();
const server = http.createServer(app);
// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Socket.io
const io = new Server(server);

// --- üéØ –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ï–ë–ê–¢–û–í ---
let debateState = {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    theme: "–¢–µ–º–∞ –¥–µ–±–∞—Ç–æ–≤ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–∞",
    timers: {
        blue: 60, // –í—Ä–µ–º—è —Ä–µ—á–∏ –°–∏–Ω–∏—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–µ–∫)
        red: 60,  // –í—Ä–µ–º—è —Ä–µ—á–∏ –ö—Ä–∞—Å–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–µ–∫)
        vote: 30, // –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–µ–∫)
    },
    // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    currentPhase: "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ", // '–†–µ—á—å —Å–∏–Ω–∏—Ö', '–†–µ—á—å –∫—Ä–∞—Å–Ω—ã—Ö', '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', '–ü–∞—É–∑–∞'
    remainingTime: 0,
    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (—Ö—Ä–∞–Ω–∏–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –≤—ã–±–æ—Ä, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –¥–≤–∞–∂–¥—ã)
    votes: {
        blue: 0,
        red: 0,
        voters: {}, // { socketId: 'blue' | 'red' }
    }
};

let timerInterval = null;
const HOST_PASSWORD = process.env.HOST_PASSWORD || 'default_password'; // –ü–∞—Ä–æ–ª—å –∏–∑ .env

// --- üì° –§–£–ù–ö–¶–ò–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ---

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–±–∞—Ç–æ–≤ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º.
 */
function broadcastState() {
    const totalVotes = debateState.votes.blue + debateState.votes.red;
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50% / 50% –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤ –Ω–µ—Ç
    const bluePercent = totalVotes > 0 ? ((debateState.votes.blue / totalVotes) * 100).toFixed(0) : 50; 
    const redPercent = totalVotes > 0 ? ((debateState.votes.red / totalVotes) * 100).toFixed(0) : 50;

    io.emit('debateState', {
        ...debateState,
        percentages: {
            blue: parseInt(bluePercent),
            red: parseInt(redPercent),
            total: totalVotes
        }
    });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.
 */
function startTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    timerInterval = setInterval(() => {
        if (debateState.remainingTime > 0) {
            debateState.remainingTime -= 1;
            broadcastState(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É –≤—Å–µ—Ö
        } else {
            // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            clearInterval(timerInterval);
            timerInterval = null;
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–∑—ã –≤ "–ü–∞—É–∑–∞" –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
            if (debateState.currentPhase !== "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ") {
                console.log(`–§–∞–∑–∞ "${debateState.currentPhase}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
                debateState.currentPhase = "–ü–∞—É–∑–∞"; 
                broadcastState();
            }
        }
    }, 1000); // 1000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 1 —Å–µ–∫—É–Ω–¥–∞
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ –≥–æ–ª–æ—Å–∞.
 */
function resetAll() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
    debateState.currentPhase = "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ";
    debateState.remainingTime = 0;
    debateState.votes = { blue: 0, red: 0, voters: {} };
    broadcastState();
    console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–±–∞—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω–æ.");
}

// --- üåê –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô SOCKET.IO ---

io.on('connection', (socket) => {
    console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

    // 1. –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    broadcastState();

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –í–µ–¥—É—â–µ–≥–æ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª—è)
    socket.on('hostCommand', (data) => {
        const { command, password, payload } = data;

        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ 'auth' (–≤—Ö–æ–¥), –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –≤–µ–¥—É—â–∏–π.
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ.
        if (password !== HOST_PASSWORD) {
            socket.emit('authError', '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'); 
            return;
        }

        console.log(`–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ (${socket.id}): ${command}`, payload);
        
        switch (command) {
            case 'setTheme':
                debateState.theme = payload.newTheme;
                broadcastState();
                break;
            case 'setTimer':
                // payload: { type: 'blue'|'red'|'vote', duration: 60 }
                const duration = parseInt(payload.duration);
                if (duration > 0) {
                    debateState.timers[payload.type] = duration;
                    broadcastState();
                }
                break;
            case 'startPhase':
                // payload: { phase: '–†–µ—á—å —Å–∏–Ω–∏—Ö'|'–†–µ—á—å –∫—Ä–∞—Å–Ω—ã—Ö'|'–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ' }
                let phaseDuration;
                if (payload.phase === '–†–µ—á—å —Å–∏–Ω–∏—Ö') phaseDuration = debateState.timers.blue;
                else if (payload.phase === '–†–µ—á—å –∫—Ä–∞—Å–Ω—ã—Ö') phaseDuration = debateState.timers.red;
                else if (payload.phase === '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ') {
                    phaseDuration = debateState.timers.vote;
                    // –°–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∞–∑—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                    debateState.votes = { blue: 0, red: 0, voters: {} };
                } else return; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞

                debateState.currentPhase = payload.phase;
                debateState.remainingTime = phaseDuration;
                startTimer();
                broadcastState();
                break;
            case 'stopPhase':
                if (timerInterval) {
                    clearInterval(timerInterval);
                    timerInterval = null;
                }
                debateState.currentPhase = "–ü–∞—É–∑–∞";
                broadcastState();
                break;
            case 'resetAll':
                resetAll();
                break;
        }
    });

    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –æ—Ç –ó—Ä–∏—Ç–µ–ª–µ–π
    socket.on('submitVote', (data) => {
        const { side } = data; // side: 'blue' –∏–ª–∏ 'red'
        
        // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ú–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–∑–µ "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
        if (debateState.currentPhase !== '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ') {
            socket.emit('voteError', '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.');
            return;
        }

        // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Ä–∞—É–Ω–¥
        if (debateState.votes.voters[socket.id]) {
            socket.emit('voteError', '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.');
            return;
        }

        // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≥–æ–ª–æ—Å
        if (side === 'blue') {
            debateState.votes.blue += 1;
        } else if (side === 'red') {
            debateState.votes.red += 1;
        } else {
            return; // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
        debateState.votes.voters[socket.id] = side; 
        
        console.log(`–ù–æ–≤—ã–π –≥–æ–ª–æ—Å –¥–ª—è ${side}. –í—Å–µ–≥–æ: ${debateState.votes.blue} üîµ / ${debateState.votes.red} üî¥`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º
        socket.emit('voteConfirmed', '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≥–æ–ª–æ—Å!');
        broadcastState();
    });

    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

// --- üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'public' (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—à HTML/CSS/JS)
app.use(express.static(path.join(__dirname, 'public')));

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`–ü–∞—Ä–æ–ª—å –≤–µ–¥—É—â–µ–≥–æ: ${HOST_PASSWORD}`);
});
